// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: calculator.proto
#ifndef GRPC_calculator_2eproto__INCLUDED
#define GRPC_calculator_2eproto__INCLUDED

#include "calculator.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace calculator {

// The calculator service definition.
class Calculator final {
 public:
  static constexpr char const* service_full_name() {
    return "calculator.Calculator";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Add two numbers
    virtual ::grpc::Status Add(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::calculator::CalculationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>> AsyncAdd(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>>(AsyncAddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>> PrepareAsyncAdd(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>>(PrepareAsyncAddRaw(context, request, cq));
    }
    // Subtract two numbers
    virtual ::grpc::Status Sub(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::calculator::CalculationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>> AsyncSub(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>>(AsyncSubRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>> PrepareAsyncSub(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>>(PrepareAsyncSubRaw(context, request, cq));
    }
    // Mul two numbers
    virtual ::grpc::Status Mul(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::calculator::CalculationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>> AsyncMul(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>>(AsyncMulRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>> PrepareAsyncMul(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>>(PrepareAsyncMulRaw(context, request, cq));
    }
    // Div two numbers
    virtual ::grpc::Status Div(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::calculator::CalculationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>> AsyncDiv(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>>(AsyncDivRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>> PrepareAsyncDiv(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>>(PrepareAsyncDivRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Add two numbers
      virtual void Add(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Add(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Add(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Subtract two numbers
      virtual void Sub(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Sub(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Sub(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Sub(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Sub(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Sub(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Mul two numbers
      virtual void Mul(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Mul(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Mul(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Mul(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Mul(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Mul(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Div two numbers
      virtual void Div(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Div(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Div(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Div(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Div(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Div(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>* AsyncAddRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>* PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>* AsyncSubRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>* PrepareAsyncSubRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>* AsyncMulRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>* PrepareAsyncMulRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>* AsyncDivRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::calculator::CalculationResponse>* PrepareAsyncDivRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Add(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::calculator::CalculationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>> AsyncAdd(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>>(AsyncAddRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>> PrepareAsyncAdd(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>>(PrepareAsyncAddRaw(context, request, cq));
    }
    ::grpc::Status Sub(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::calculator::CalculationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>> AsyncSub(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>>(AsyncSubRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>> PrepareAsyncSub(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>>(PrepareAsyncSubRaw(context, request, cq));
    }
    ::grpc::Status Mul(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::calculator::CalculationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>> AsyncMul(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>>(AsyncMulRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>> PrepareAsyncMul(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>>(PrepareAsyncMulRaw(context, request, cq));
    }
    ::grpc::Status Div(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::calculator::CalculationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>> AsyncDiv(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>>(AsyncDivRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>> PrepareAsyncDiv(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>>(PrepareAsyncDivRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Add(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)>) override;
      void Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Add(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Add(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Sub(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)>) override;
      void Sub(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Sub(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Sub(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Sub(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Sub(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Mul(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)>) override;
      void Mul(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Mul(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Mul(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Mul(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Mul(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Div(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)>) override;
      void Div(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Div(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Div(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Div(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Div(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>* AsyncAddRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>* PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>* AsyncSubRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>* PrepareAsyncSubRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>* AsyncMulRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>* PrepareAsyncMulRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>* AsyncDivRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>* PrepareAsyncDivRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Add_;
    const ::grpc::internal::RpcMethod rpcmethod_Sub_;
    const ::grpc::internal::RpcMethod rpcmethod_Mul_;
    const ::grpc::internal::RpcMethod rpcmethod_Div_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Add two numbers
    virtual ::grpc::Status Add(::grpc::ServerContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response);
    // Subtract two numbers
    virtual ::grpc::Status Sub(::grpc::ServerContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response);
    // Mul two numbers
    virtual ::grpc::Status Mul(::grpc::ServerContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response);
    // Div two numbers
    virtual ::grpc::Status Div(::grpc::ServerContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Add() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdd(::grpc::ServerContext* context, ::calculator::CalculationRequest* request, ::grpc::ServerAsyncResponseWriter< ::calculator::CalculationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Sub : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Sub() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Sub() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sub(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSub(::grpc::ServerContext* context, ::calculator::CalculationRequest* request, ::grpc::ServerAsyncResponseWriter< ::calculator::CalculationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Mul : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Mul() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Mul() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mul(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMul(::grpc::ServerContext* context, ::calculator::CalculationRequest* request, ::grpc::ServerAsyncResponseWriter< ::calculator::CalculationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Div : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Div() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Div() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Div(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDiv(::grpc::ServerContext* context, ::calculator::CalculationRequest* request, ::grpc::ServerAsyncResponseWriter< ::calculator::CalculationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Add<WithAsyncMethod_Sub<WithAsyncMethod_Mul<WithAsyncMethod_Div<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Add() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::calculator::CalculationRequest, ::calculator::CalculationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response) { return this->Add(context, request, response); }));}
    void SetMessageAllocatorFor_Add(
        ::grpc::experimental::MessageAllocator< ::calculator::CalculationRequest, ::calculator::CalculationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::calculator::CalculationRequest, ::calculator::CalculationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Add(
      ::grpc::CallbackServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Add(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Sub : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Sub() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::calculator::CalculationRequest, ::calculator::CalculationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response) { return this->Sub(context, request, response); }));}
    void SetMessageAllocatorFor_Sub(
        ::grpc::experimental::MessageAllocator< ::calculator::CalculationRequest, ::calculator::CalculationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::calculator::CalculationRequest, ::calculator::CalculationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Sub() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sub(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Sub(
      ::grpc::CallbackServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Sub(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Mul : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Mul() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::calculator::CalculationRequest, ::calculator::CalculationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response) { return this->Mul(context, request, response); }));}
    void SetMessageAllocatorFor_Mul(
        ::grpc::experimental::MessageAllocator< ::calculator::CalculationRequest, ::calculator::CalculationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::calculator::CalculationRequest, ::calculator::CalculationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Mul() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mul(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Mul(
      ::grpc::CallbackServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Mul(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Div : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Div() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::calculator::CalculationRequest, ::calculator::CalculationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response) { return this->Div(context, request, response); }));}
    void SetMessageAllocatorFor_Div(
        ::grpc::experimental::MessageAllocator< ::calculator::CalculationRequest, ::calculator::CalculationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::calculator::CalculationRequest, ::calculator::CalculationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Div() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Div(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Div(
      ::grpc::CallbackServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Div(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Add<ExperimentalWithCallbackMethod_Sub<ExperimentalWithCallbackMethod_Mul<ExperimentalWithCallbackMethod_Div<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Add<ExperimentalWithCallbackMethod_Sub<ExperimentalWithCallbackMethod_Mul<ExperimentalWithCallbackMethod_Div<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Add() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Sub : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Sub() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Sub() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sub(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Mul : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Mul() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Mul() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mul(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Div : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Div() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Div() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Div(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Add() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAdd(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Sub : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Sub() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Sub() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sub(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSub(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Mul : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Mul() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Mul() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mul(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMul(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Div : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Div() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Div() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Div(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDiv(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Add() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Add(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Add(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Add(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Sub : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Sub() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Sub(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Sub() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sub(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Sub(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Sub(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Mul : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Mul() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Mul(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Mul() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Mul(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Mul(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Mul(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Div : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Div() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Div(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Div() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Div(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Div(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Div(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Add : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Add() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::calculator::CalculationRequest, ::calculator::CalculationResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::calculator::CalculationRequest, ::calculator::CalculationResponse>* streamer) {
                       return this->StreamedAdd(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Add() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Add(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAdd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::calculator::CalculationRequest,::calculator::CalculationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Sub : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Sub() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::calculator::CalculationRequest, ::calculator::CalculationResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::calculator::CalculationRequest, ::calculator::CalculationResponse>* streamer) {
                       return this->StreamedSub(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Sub() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Sub(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSub(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::calculator::CalculationRequest,::calculator::CalculationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Mul : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Mul() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::calculator::CalculationRequest, ::calculator::CalculationResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::calculator::CalculationRequest, ::calculator::CalculationResponse>* streamer) {
                       return this->StreamedMul(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Mul() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Mul(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMul(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::calculator::CalculationRequest,::calculator::CalculationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Div : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Div() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::calculator::CalculationRequest, ::calculator::CalculationResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::calculator::CalculationRequest, ::calculator::CalculationResponse>* streamer) {
                       return this->StreamedDiv(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Div() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Div(::grpc::ServerContext* /*context*/, const ::calculator::CalculationRequest* /*request*/, ::calculator::CalculationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDiv(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::calculator::CalculationRequest,::calculator::CalculationResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Add<WithStreamedUnaryMethod_Sub<WithStreamedUnaryMethod_Mul<WithStreamedUnaryMethod_Div<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Add<WithStreamedUnaryMethod_Sub<WithStreamedUnaryMethod_Mul<WithStreamedUnaryMethod_Div<Service > > > > StreamedService;
};

}  // namespace calculator


#endif  // GRPC_calculator_2eproto__INCLUDED
