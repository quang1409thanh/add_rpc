// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: calculator.proto

#include "calculator.pb.h"
#include "calculator.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace calculator {

static const char* Calculator_method_names[] = {
  "/calculator.Calculator/Add",
  "/calculator.Calculator/Sub",
  "/calculator.Calculator/Mul",
  "/calculator.Calculator/Div",
};

std::unique_ptr< Calculator::Stub> Calculator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Calculator::Stub> stub(new Calculator::Stub(channel));
  return stub;
}

Calculator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Add_(Calculator_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Sub_(Calculator_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Mul_(Calculator_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Div_(Calculator_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Calculator::Stub::Add(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::calculator::CalculationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Add_, context, request, response);
}

void Calculator::Stub::experimental_async::Add(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, std::move(f));
}

void Calculator::Stub::experimental_async::Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, std::move(f));
}

void Calculator::Stub::experimental_async::Add(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, reactor);
}

void Calculator::Stub::experimental_async::Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>* Calculator::Stub::AsyncAddRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::calculator::CalculationResponse>::Create(channel_.get(), cq, rpcmethod_Add_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>* Calculator::Stub::PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::calculator::CalculationResponse>::Create(channel_.get(), cq, rpcmethod_Add_, context, request, false);
}

::grpc::Status Calculator::Stub::Sub(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::calculator::CalculationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Sub_, context, request, response);
}

void Calculator::Stub::experimental_async::Sub(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Sub_, context, request, response, std::move(f));
}

void Calculator::Stub::experimental_async::Sub(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Sub_, context, request, response, std::move(f));
}

void Calculator::Stub::experimental_async::Sub(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Sub_, context, request, response, reactor);
}

void Calculator::Stub::experimental_async::Sub(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Sub_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>* Calculator::Stub::AsyncSubRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::calculator::CalculationResponse>::Create(channel_.get(), cq, rpcmethod_Sub_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>* Calculator::Stub::PrepareAsyncSubRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::calculator::CalculationResponse>::Create(channel_.get(), cq, rpcmethod_Sub_, context, request, false);
}

::grpc::Status Calculator::Stub::Mul(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::calculator::CalculationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Mul_, context, request, response);
}

void Calculator::Stub::experimental_async::Mul(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Mul_, context, request, response, std::move(f));
}

void Calculator::Stub::experimental_async::Mul(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Mul_, context, request, response, std::move(f));
}

void Calculator::Stub::experimental_async::Mul(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Mul_, context, request, response, reactor);
}

void Calculator::Stub::experimental_async::Mul(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Mul_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>* Calculator::Stub::AsyncMulRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::calculator::CalculationResponse>::Create(channel_.get(), cq, rpcmethod_Mul_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>* Calculator::Stub::PrepareAsyncMulRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::calculator::CalculationResponse>::Create(channel_.get(), cq, rpcmethod_Mul_, context, request, false);
}

::grpc::Status Calculator::Stub::Div(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::calculator::CalculationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Div_, context, request, response);
}

void Calculator::Stub::experimental_async::Div(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Div_, context, request, response, std::move(f));
}

void Calculator::Stub::experimental_async::Div(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Div_, context, request, response, std::move(f));
}

void Calculator::Stub::experimental_async::Div(::grpc::ClientContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Div_, context, request, response, reactor);
}

void Calculator::Stub::experimental_async::Div(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::calculator::CalculationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Div_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>* Calculator::Stub::AsyncDivRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::calculator::CalculationResponse>::Create(channel_.get(), cq, rpcmethod_Div_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::calculator::CalculationResponse>* Calculator::Stub::PrepareAsyncDivRaw(::grpc::ClientContext* context, const ::calculator::CalculationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::calculator::CalculationResponse>::Create(channel_.get(), cq, rpcmethod_Div_, context, request, false);
}

Calculator::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Calculator_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Calculator::Service, ::calculator::CalculationRequest, ::calculator::CalculationResponse>(
          [](Calculator::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::calculator::CalculationRequest* req,
             ::calculator::CalculationResponse* resp) {
               return service->Add(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Calculator_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Calculator::Service, ::calculator::CalculationRequest, ::calculator::CalculationResponse>(
          [](Calculator::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::calculator::CalculationRequest* req,
             ::calculator::CalculationResponse* resp) {
               return service->Sub(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Calculator_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Calculator::Service, ::calculator::CalculationRequest, ::calculator::CalculationResponse>(
          [](Calculator::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::calculator::CalculationRequest* req,
             ::calculator::CalculationResponse* resp) {
               return service->Mul(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Calculator_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Calculator::Service, ::calculator::CalculationRequest, ::calculator::CalculationResponse>(
          [](Calculator::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::calculator::CalculationRequest* req,
             ::calculator::CalculationResponse* resp) {
               return service->Div(ctx, req, resp);
             }, this)));
}

Calculator::Service::~Service() {
}

::grpc::Status Calculator::Service::Add(::grpc::ServerContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Calculator::Service::Sub(::grpc::ServerContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Calculator::Service::Mul(::grpc::ServerContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Calculator::Service::Div(::grpc::ServerContext* context, const ::calculator::CalculationRequest* request, ::calculator::CalculationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace calculator

